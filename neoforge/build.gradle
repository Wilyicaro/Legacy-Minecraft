plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    developmentNeoForge(api(include(sdl_dependency)))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}


shadowJar {
    exclude "fabric.mod.json"
    exclude "legacy.common.json"

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"
}


remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    atAccessWideners.add "legacy.accesswidener"
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    afterEvaluate {
        [":common"].forEach {
            def depSources = project(it).sourcesJar
            dependsOn depSources
            from(depSources.archiveFile.map { zipTree(it) }) {
                exclude "legacy.accesswidener"
            }
        }
    }
}


components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
